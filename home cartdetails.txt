import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import Products from "../conponment/products";
import Groups from "../conponment/groupproducts";
import Navbar from "../conponment/navbare";
import CartUserSidebar from "../conponment/cartuser";
import "../styles/global.css";
import CartDetails from "./detailscart";
import Footer from "../conponment/footer";

function Homepage() {
  const [user, setUser] = useState(null);
  const [error, setError] = useState("");
  const [CartUserSidebarproducts, setCartUserSidebarproducts] = useState([]);
  const [CartUserSidebargroupproducts, setCartUserSidebargroupproducts] = useState([]);
  const [isCartOpen, setIsCartOpen] = useState(false);
  const [darkMode, setDarkMode] = useState(() => {
    return localStorage.getItem("darkMode") === "enabled";
  });
  const navigate = useNavigate();

  useEffect(() => {
    const fetchData = async () => {
      const token = localStorage.getItem("token");
      if (!token) {
      }

      try {
        const userResponse = await axios.get("http://localhost:4000/api/users/me", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setUser(userResponse.data);
      } catch (err) {
        console.error("Error fetching data:", err);
        setError("Session expired. Please log in again.");
        localStorage.removeItem("token");
      }
    };

    const fetchProducts = async () => {
      try {
        const response = await axios.get("http://localhost:4000/api/products");
        setCartUserSidebarproducts(response.data);
        setError(null);
      } catch (err) {
        console.error("Error fetching products:", err);
        setError("Error fetching products.");
      }
    };

    const fetchGroups = async () => {
      try {
        const response = await axios.get("http://localhost:4000/api/groupproducts");
        setCartUserSidebargroupproducts(response.data);
        setError(null);
      } catch (err) {
        console.error("Error fetching group products:", err);
        setError("Error fetching group products.");
      }
    };

    fetchProducts();
    fetchGroups();
    fetchData();
  }, [navigate]);

  const handleAddToCart = async (id, type) => {
    const token = localStorage.getItem("token");
    if (!token) {
      if (type === "product") {
        setCartUserSidebarproducts((prev) => {
          const existing = prev.find((p) => p.productId === productOrGroup._id);
          if (existing) {
            return prev.map((p) =>
              p.productId === productOrGroup._id
                ? { ...p, quantity: p.quantity + quantity }
                : p
            );
          } else {
            return [...prev, { productId: productOrGroup._id, quantity }];
          }
        });
      } else {
        setCartUserSidebargroupproducts((prev) => {
          const existing = prev.find((g) => g.groupId === productOrGroup._id);
          if (existing) {
            return prev.map((g) =>
              g.groupId === productOrGroup._id
                ? { ...g, quantity: g.quantity + quantity }
                : g
            );
          } else {
            return [...prev, { groupId: productOrGroup._id, quantity }];
          }
        });
    };
    }
  };

  const deleteFromCart = (id, type) => {
    if (type === "product") {
      setCartUserSidebarproducts((prev) => prev.filter((p) => p.productId !== id));
    } else {
      setCartUserSidebargroupproducts((prev) => prev.filter((g) => g.groupId !== id));
    }
  };

  const updateitemcart = (id, type, quantity) => {
    if (type === "product") {
      setCartUserSidebarproducts((prev) =>
        prev.map((p) => (p.productId === id ? { ...p, quantity } : p))
      );
    } else {
      setCartUserSidebargroupproducts((prev) =>
        prev.map((g) => (g.groupId === id ? { ...g, quantity } : g))
      );
    }
  };

  if (error) return <p>{error}</p>;
  if (!user) return <p>Loading...</p>;

  return (
    <div>
      <Navbar isCartOpen={isCartOpen} setIsCartOpen={setIsCartOpen} darkMode={darkMode} setDarkMode={setDarkMode} />
      <CartDetails
        updateitemcart={updateitemcart}
        deleteFromCart={deleteFromCart}
        carts={
          user
            ? user.cart
            : {
                products: CartUserSidebarproducts,
                groupProducts: CartUserSidebargroupproducts,
              }
        }
      />
      <div className="projectsandservices">
        <Products onAddToCart={handleAddToCart} />
        <Groups onAddToCart={handleAddToCart} />
        <Footer />
      </div>
    </div>
  );
}

export default Homepage;




































import React, { useEffect, useState, useCallback } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";

function CartDetails({ carts, deleteFromCart, updateitemcart }) {
  const [cart, setCart] = useState(null);
  const [user, setUser] = useState(null);
  const [products, setProducts] = useState([]);
  const [groups, setGroups] = useState([]);
  const [token, setToken] = useState(localStorage.getItem("token"));
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState("");
  const navigate = useNavigate();

  const fetchCartItems = async () => {
    try {
      const productPromises = carts.products.map((item) =>
        axios.get(`http://localhost:4000/api/products/${item.productId}`)
      );

      const groupPromises = carts.groupProducts.map((item) =>
        axios.get(`http://localhost:4000/api/groupproducts/${item.groupId}`)
      );

      const productResponses = await Promise.all(productPromises);
      const groupResponses = await Promise.all(groupPromises);

      const productsData = productResponses.map((res, index) => ({
        product: res.data,
        quantity: carts.products[index].quantity,
      }));

      const groupsData = groupResponses.map((res, index) => ({
        group: res.data,
        quantity: carts.groupProducts[index].quantity,
      }));

      setProducts(productsData);
      setGroups(groupsData);
    } catch (error) {
      console.error("Error fetching cart items:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const fetchCart = useCallback(async () => {
    if (!token) {
      await fetchCartItems();
      return;
    }

    try {
      const response = await axios.get("http://localhost:4000/api/users/me", {
        headers: { Authorization: `Bearer ${token}` },
      });
      setCart(response.data.cart);
      setUser(response.data);
    } catch (err) {
      console.error("Error fetching cart:", err);
      setError("Error loading cart. Please try again.");
    }
  }, [carts]);

  useEffect(() => {
    fetchCart();
  }, [fetchCart]);

  const deletethisProduit = async (product, type) => {
    if (!token) {
      deleteFromCart(product, type);
      fetchCart();
      return;
    }

    try {
      await axios.delete(
        `http://localhost:4000/api/users/cart/product/${product.productId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      fetchCart();
    } catch (err) {
      console.error("Error deleting product:", err);
    }
  };

  const deletethisGroup = async (group, type) => {
    if (!token) {
      deleteFromCart(group, type);
      fetchCart();
      return;
    }

    try {
      await axios.delete(
        `http://localhost:4000/api/users/cart/groupproduct/${group.groupId}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      fetchCart();
    } catch (err) {
      console.error("Error deleting group:", err);
    }
  };

  const updateQuantity = async (type, id, newQuantity) => {
    if (newQuantity < 1) return;
    if (!token) {
      updateitemcart(id, type, newQuantity);
      fetchCart();
      return;
    }

    try {
      await axios.put(
        `http://localhost:4000/api/users/updateCart/${user._id}`,
        { type, id, quantity: newQuantity },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      fetchCart();
    } catch (err) {
      console.error("Error updating quantity:", err);
    }
  };

  if (error) return <p className="error-message">{error}</p>;
  if (!cart) return <p className="loading-message">Loading...</p>;
  return (
    <div className="cart-details">
      {localStorage.getItem("token") ? (
        <>
          <h2>Cart Details</h2>
          {cart.products.length === 0 && cart.groupProducts.length === 0 ? (
            <p className="empty-cart">Your cart is empty.</p>
          ) : (
            <div className="cart-items">
              {cart.products.map((product) => (
                <div key={product.productId} className="cart-item">
                  <img
                    src={`http://localhost:4000/${product.productId.image}`}
                    alt={product.productId.name}
                    className="cart-item-image"
                  />
                  <p className="cart-item-name">{product.productId.name}</p>
                  <div className="quantity-controls">
                    <button
                      className="quantity-btn"
                      onClick={() =>
                        updateQuantity("products", product.productId, product.quantity - 1)
                      }
                    >
                      ➖
                    </button>
                    <span className="quantity">{product.quantity}</span>
                    <button
                      className="quantity-btn"
                      onClick={() =>
                        updateQuantity("products", product.productId, product.quantity + 1)
                      }
                    >
                      ➕
                    </button>
                  </div>
                  <button
                    className="delete-btn"
                    onClick={() => deletethisProduit(product, "product")}
                  >
                    Delete Product
                  </button>
                </div>
              ))}
  
              {cart.groupProducts.map((group) => (
                <div key={group.groupId} className="cart-item">
                  <img
                    src={`http://localhost:4000/${group.groupId.image}`}
                    alt={group.groupId.name}
                    className="cart-item-image"
                  />
                  <p className="cart-item-name">Group: {group.groupId.name}</p>
                  <div className="quantity-controls">
                    <button
                      className="quantity-btn"
                      onClick={() =>
                        updateQuantity("groupProducts", group.groupId, group.quantity - 1)
                      }
                    >
                      ➖
                    </button>
                    <span className="quantity">{group.quantity}</span>
                    <button
                      className="quantity-btn"
                      onClick={() =>
                        updateQuantity("groupProducts", group.groupId, group.quantity + 1)
                      }
                    >
                      ➕
                    </button>
                  </div>
                  <button
                    className="delete-btn"
                    onClick={() => deletethisGroup(group, "group")}
                  >
                    Delete Group
                  </button>
                </div>
              ))}
            </div>
          )}
          <button
            className="checkout-btn"
            onClick={() => navigate("/detailClient")}
          >
            Proceed to Checkout
          </button>
        </>
      ) : isLoading ? (
        <p className="loading-message">Loading cart items...</p>
      ) : (
        <div className="cart-items">
          {products.map((item, index) => (
            <div key={index} className="cart-item">
              <img src={item.product.imageUrl} alt={item.product.name} />
              <h3>{item.product.name}</h3>
              <p>Price: ${item.product.price}</p>
              <p>Quantity: {item.quantity}</p>
              <div className="quantity-controls">
                <button
                  onClick={() =>
                    updateQuantity("product", item.product._id, item.quantity - 1)
                  }
                >
                  -
                </button>
                <span>{item.quantity}</span>
                <button
                  onClick={() =>
                    updateQuantity("product", item.product._id, item.quantity + 1)
                  }
                >
                  +
                </button>
              </div>
              <button onClick={() => deletethisProduit(item, "product")}>
                Remove
              </button>
            </div>
          ))}
          {groups.map((item, index) => (
            <div key={index} className="cart-item">
              <img src={item.group.imageUrl} alt={item.group.name} />
              <h3>{item.group.name}</h3>
              <p>Price: ${item.group.price}</p>
              <p>Quantity: {item.quantity}</p>
              <div className="quantity-controls">
                <button
                  onClick={() =>
                    updateQuantity("group", item.group._id, item.quantity - 1)
                  }
                >
                  -
                </button>
                <span>{item.quantity}</span>
                <button
                  onClick={() =>
                    updateQuantity("group", item.group._id, item.quantity + 1)
                  }
                >
                  +
                </button>
              </div>
              <button onClick={() => deletethisGroup(item, "group")}>
                Remove
              </button>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default CartDetails;